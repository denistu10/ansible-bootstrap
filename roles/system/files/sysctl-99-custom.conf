# https://defcon.ru/web-security/2860/
# https://romantelychko.com/blog/1300/
# 
net.ipv4.ip_forward = 1
net.ipv6.conf.all.forwarding=1
## Перезагрузка системы в случае "Kernel panic" через 10 секунд
# kernel.panic = 10

## Оптимизация ОЗУ
# kernel.shmmax = 2071891968
# kernel.shmall = 505833

## Оптимизация подсистемы вывода сообщений
kernel.msgmnb = 65536
kernel.msgmax = 65536

## Оптимизация подсистемы работы с файлами ("Too many open files fix")
# /etc/security/limits.conf
# *       soft    nofile  2097152  
# *       hard    nofile  2097152
fs.file-max = 2097152

vm.swappiness = 10
vm.vfs_cache_pressure = 50

# Максимальное число открытых сокетов, ждущих соединения
net.core.somaxconn = 262144

# Увеличим длину очереди для входящих пакетов. Значение 30000 это нормальное значение даже для 10GigE
net.core.netdev_max_backlog = 30000

# Отключение на всех интерфейсах ipv6
net.ipv6.conf.all.disable_ipv6 = 1

# # Не принимать и не отправлять ICMP-пакеты перенаправления
# # Единица имеет смысл только для хостов, использующихся в качестве маршрутизаторов.
# net.ipv4.conf.all.accept_redirects = 0
# net.ipv4.conf.all.secure_redirects = 0
# net.ipv4.conf.all.send_redirects = 0

# максимальное число допустимых в системе сокетов TCP
net.ipv4.tcp_max_orphans = 65536

# время сохранения сокета в состоянии FIN-WAIT-2 после его закрытия локальной стороной
net.ipv4.tcp_fin_timeout = 60

# Уменьшаем временной интервал попытки определения жизнеспособности соединения. По умолчанию 7200, т.е. через 2 часа после того как через соединение прошел последний пакет, система пошлет keep-alive запрос, чтобы узнать состояние соединения. Уменьшим этот параметр до 30 минут (1800 сек).
net.ipv4.tcp_keepalive_time = 1800
net.ipv4.tcp_keepalive_intvl = 30
net.ipv4.tcp_keepalive_probes = 7

# число попыток повтора передачи пакетов SYNACK для пассивных соединений TCP
net.ipv4.tcp_synack_retries = 2

# http://fx-files.ru/archives/602
net.core.wmem_max = 268435456
net.core.rmem_max = 268435456
net.core.rmem_default = 8388608
net.core.wmem_default = 4194394
# # tcp_wmem Определяет использование памяти на каждый сокет для автоматической настройки. Первое значение -- минимальное число байт, выделенных для буфера отправления сокета. Второе значение -- значение по умолчанию (переопределенное wmem_default), до которого размер буфера может расти при несильной загрузке системы. Третье значение -- максимальное пространство буфера отправления (переопределенное wmem_max).
net.ipv4.tcp_wmem = 10240 4194394 33554432

# # tcp_rmem То же, что и tcp_wmem, за исключением того, что ссылается на буферы получения для автоматической настройки.
net.ipv4.tcp_rmem = 10240 8388608 33554432

# # http://citforum.ru/operating_systems/linux/ipsysctl/3.shtml
# # tcp_mem	Определяет, как стек TCP должен вести себя с использованием памяти; считается в страницах памяти (как правило 4KB). Первое значение -- нижняя граница для использования памяти. Второе значение -- порог для режима уплотнения памяти, чтобы начать использовать уплотнение для использования буфера. Третье значение -- максимальная граница. На этом уровне пакеты могут быть пропущены для уменьшения использования памяти. Увеличьте счет для большого BDP (но помните, он указывается в страницах памяти, не в байтах).
net.ipv4.tcp_mem = 50576 64768 98152

net.ipv4.tcp_orphan_retries = 0

# Увеличим возможное количество сокетов в состоянии TIME_WAIT
net.ipv4.tcp_max_tw_buckets = 720000

# Разрешаем быструю утилизацию сокетов находящихся в состоянии TIME_WAIT
net.ipv4.tcp_tw_recycle = 1

# Включаем tcp_timestamps иначе не будет работать опция tcp_tw_reuse описанная ниже
net.ipv4.tcp_timestamps = 1

# Разрешаем повторное использование TIME-WAIT сокетов в случаях, если протокол считает это безопасным.
net.ipv4.tcp_tw_reuse = 1

# tcp_syncookies, эта опция необходима для того, чтобы вы могли использовать параметр net.ipv4.tcp_max_syn_backlog
net.ipv4.tcp_syncookies = 1

# максимальное число запоминаемых запросов на соединение, для которых не было получено подтверждения от подключающегося клиента
net.ipv4.tcp_max_syn_backlog = 262144
# tcp_sack Активирует выборочное подтверждение (selective acknowledgment), которое улучшает производительность, выборочно подтверждая пакеты, полученные вне очереди (в результате отправитель повторно передает только пропущенные сегменты); должен быть включен (для большой области сетевых коммуникаций), но может усилить использование CPU.
net.ipv4.tcp_sack = 1

# https://habrahabr.ru/post/168407/
# net.ipv4.tcp_congestion_control = hybla

net.ipv4.tcp_slow_start_after_idle = 0

# Разрешаем динамическое изменение размера окна TCP стека
net.ipv4.tcp_window_scaling = 1

# Защищаемся от TIME_WAIT атак.
net.ipv4.tcp_rfc1337 = 1

# Не сохранять результаты измерений TCP соединения в кеше при его закрытии
net.ipv4.tcp_no_metrics_save = 1

net.ipv4.route.flush = 1

# Не отвечаем на ICMP ECHO запросы, переданные широковещательными пакетами
net.ipv4.icmp_echo_ignore_broadcasts = 1

# # Не отвечаем на ошибочно сформированные сообщения
net.ipv4.icmp_ignore_bogus_error_responses = 1

# # Увеличиваем диапазон локальных портов, доступных для установки исходящих подключений
net.ipv4.ip_local_port_range = 2000 65535

# # Разрешает временные метки протокола TCP
net.ipv4.tcp_timestamps = 1

# # Активируем защиту от IP-спуфинга.
# net.ipv4.conf.all.rp_filter = 1
# net.ipv4.conf.ens192.rp_filter = 1
# net.ipv4.conf.default.rp_filter = 1

# # Запрещаем маршрутизацию от источника
# net.ipv4.conf.all.accept_source_route = 0
# net.ipv4.conf.ens192.accept_source_route = 0
# net.ipv4.conf.default.accept_source_route = 0
